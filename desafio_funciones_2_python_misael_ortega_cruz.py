# -*- coding: utf-8 -*-
"""DESAFIO_FUNCIONES_2_Python_Misael_Ortega_Cruz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDTFhRjkgNXhu8GZTjq2xxwoWx48SqmL

**EJERCICIO 1 //**

CONSIGNA:

Realiza una funci칩n llamada area_rectangulo() que devuelva el 치rea del rect치ngulo a partir de una base y una altura. Calcula el 치rea de un rect치ngulo de 15 de base y 10 de altura.


游둟 Ayuda: El 치rea de un rect치ngulo se obtiene al multiplicar la base por la altura.
"""

b = 0
h = 0
def area_rectangulo (b,h):
  b = int(input("Ingrese la base del rect치ngulo del cual desea calcular el 치rea: \n"))
  h = int(input("Ingrese la base del rect치ngulo del cual desea calcular el 치rea: \n"))
  area = (f"El 치rea del rectangulo es {b*h}")
  return area 

area_rectangulo (b,h)

"""**EJERCICIO 2 //**

CONSIGNA:

 Realiza una funci칩n llamada area_circulo() que devuelva el 치rea de un c칤rculo a partir de un radio. Calcula el 치rea de un c칤rculo de 5 de radio.

游둟 Ayuda: El 치rea de un c칤rculo se obtiene al elevar el radio a dos y multiplicando el resultado por el n칰mero pi. Puedes utilizar el valor 3.14159 como pi o importarlo del m칩dulo math.

"""

import math

r = 0

def area_circulo (r):
  r = int(input("Ingrese el radio del c칤rculo del cual desea calcular el 치rea: \n"))
  area = (f"El 치rea del c칤rculo es {(r**2)*(math.pi)}")
  return area 

area_circulo (r)

"""**EJERCICIO 3 //**

CONSIGNA:

Realiza una funci칩n llamada relacion() que a partir de dos n칰meros cumpla lo siguiente:

1 - Si el primer n칰mero es mayor que el segundo, debe devolver 1.

2 - Si el primer n칰mero es menor que el segundo, debe devolver -1.

3 - Si ambos n칰meros son iguales, debe devolver un 0.

Comprueba la relaci칩n entre los n칰meros: '5 y 10', '10 y 5' y '5 y 5'

"""

def relacion(n1,n2):
  if n1 > n2:
    resultado = 1
    return resultado
  elif n1 < n2:
    resultado = -1
    return resultado
  elif n1 == n2:
    resultado = 0
    return resultado

print (relacion (5,10))

print (relacion (10,5))

print (relacion (5,5))

"""**EJERCICIO 4 //**

CONSIGNA:

Realiza una funci칩n llamada intermedio() que a partir de dos n칰meros, devuelva su punto intermedio:

游둟 Ayuda: El n칰mero intermedio de dos n칰meros corresponde a la suma de los dos n칰meros dividida entre 2

**Comprueba el punto intermedio entre -12 y 24**


"""

def intermedio (na,nb):
  puntomedio = (na + nb)/2
  return puntomedio
print (intermedio (-12,24))

"""**EJERCICIO 5 //**

CONSIGNA:

Realiz치 una funci칩n llamada recortar() que reciba tres par치metros.

El primero es el n칰mero a recortar, el segundo es el l칤mite inferior y el tercero el l칤mite superior.

La funci칩n tendr치 que cumplir lo siguiente:

1 - Devolver el l칤mite inferior si el n칰mero es menor que 칠ste.

2 - Devolver el l칤mite superior si el n칰mero es mayor que 칠ste.

3 - Devolver el n칰mero sin cambios si no se supera ning칰n l칤mite.

Comprueba el resultado de recortar 15 entre los l칤mites 0 y 10

"""

def recortar(n,lmin,lmax):
  if n < lmin:    
    return lmin
  elif n > lmax:
    return lmax
  elif n > lmin and n < lmax:
    return n

print (recortar (15,0,10))

"""**EJERCICIO 6 //**

CONSIGNA:

Realiza una funci칩n separar() que tome una lista de n칰meros enteros y devuelva dos listas ordenadas.


La primera con los n칰meros pares, y la segunda con los n칰meros impares:

游둟 Ayuda: Para ordenar una lista autom치ticamente puedes usar el m칠todo .sort()



```
Por ejemplo:
pares, impares = separar([6,5,2,1,7])
print(pares)   # valdr칤a [2, 6]
print(impares)  # valdr칤a [1, 5, 7]

```



"""

pares = []
impares = []
numeros = []
def separar (numeros):
  print (f'Los n칰meros a separar son:{numeros}')
  for i in numeros:
    if (i % 2) == 0:
      pares.append(i)
      pares.sort()

    elif (i % 2) != 0:
      impares.append(i)
      impares.sort()
      
  print (f'Los n칰meros pares son:{pares}')
  print (f'Los n칰meros impares son:{impares}')

print (separar ([6,5,2,1,7]))